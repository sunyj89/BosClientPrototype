---
description: 
globs: .*
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---

# 智慧能源系统BOS后台设计规范

## 设计理念


## 文档要求

每次执行不需要生成变动说明文件

### 整体风格
- 采用企业级应用的简洁现代风格
- 以蓝色为主色调，搭配白色背景，体现专业性和清晰度
- 布局结构清晰，层次分明，便于用户快速定位功能
- 遵循一致性原则，各页面保持统一的设计语言

### 组件库
- 基于 Ant Design 组件库开发
- 遵循 Ant Design 设计规范，保持组件使用的一致性
- 适当定制组件样式，以符合智慧能源系统BOS后台的业务特点
- 不需要在表单页面展示统计功能
- Dashboard使用 Apache Echarts

### 通用布局
- 页面顶部为导航栏
- 左侧为菜单栏，采用树形结构展示功能模块
- 右侧为内容区域，使用卡片式布局包裹内容
- 表单和表格区域之间使用分隔线（不用卡片）
- 不需要面包屑导航


### 主容器结构

```JS
<div className="non-oil-procurement-container">
  <Card>
    <Spin spinning={loading}>
      <Tabs 
        activeKey={activeTab} 
        onChange={handleTabChange}
        size="large"
        tabBarStyle={{ marginBottom: '16px' }}
      >
        {/* Tab内容 */}
      </Tabs>
    </Spin>
  </Card>
</div>
```

```CSS
.non-oil-procurement-container {
  padding: 24px;  /* 页面四周留白 */
}

.non-oil-procurement-container .ant-card {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);  /* 卡片阴影 */
}
```

### Tab样式和布局
``` JS
<Tabs 
  activeKey={activeTab} 
  onChange={handleTabChange}
  size="large"                              // Tab大小
  tabBarStyle={{ marginBottom: '16px' }}   // Tab底部间距
>
```
```CSS
.non-oil-procurement-container .ant-tabs-tab {
  font-size: 14px;     /* Tab文字大小 */
  font-weight: 500;    /* Tab文字粗细 */
}

.non-oil-procurement-container .ant-tabs-content-holder {
  padding: 16px 0;     /* Tab内容区域内边距 */
}
```


### 响应式设计
- 采用栅格系统（Row/Col）实现响应式布局
- 表单项在不同屏幕尺寸下自适应调整
- 小屏幕下单列显示，大屏幕下多列显示
- 表格支持水平滚动（`scroll={{ x: 'max-content' }}`）

## 布局与导航

### 列表页面布局
- 页面结构自上而下：
  1. 筛选区域，包括主要操作按钮
  2. 主要操作按钮区
  3. 数据表格区

### 筛选区域规范
- 所有的筛选条件在一行，按钮在下一行，这样确保筛选框长度不影响布局
- 每个筛选框都有固定宽度，不会相互影响
- 按钮组独立成行，与筛选条件保持适当间距
- 使用 Space 组件确保按钮间距一致
- 筛选区域的background color是白色
- 筛选区域的按钮必须右对齐

### 操作按钮区规范
- 位置：筛选表单最后一行
- 布局：使用 Space 组件包裹
- 按钮顺序：查询、重置、新建/导出等功能按钮

```jsx
<Form.Item>
  <Space>
    <Button type="primary" htmlType="submit" icon={<SearchOutlined />}>
      查询
    </Button>
    <Button icon={<ReloadOutlined />}>
      重置
    </Button>
    <Button type="primary" icon={<PlusOutlined />}>
      新建
    </Button>
  </Space>
</Form.Item>
```

### 导航规范
- 左侧导航栏为2级目录设计
- 每个打开的报表采用顶部tab
- tab可以任意切换或者关闭，支持一次关闭所有tab
- 切换tab页时不刷新页面


## 组件与模式

### 创建，编辑，查看功能使用弹窗，不要使用抽屉

### 按钮样式规则

- 所有按钮的css样式都需要包含 border-radius:2px;

#### 主要操作按钮，位置在页面右侧
```jsx
// 查询按钮
<Button 
  type="primary" 
  icon={<SearchOutlined />}
  htmlType="submit"
>
  查询
</Button>

// 新建按钮
<Button 
  type="primary" 
  icon={<PlusOutlined />}
>
  新建
</Button>
```

#### 次要操作按钮，与主要操作按钮位置一样
```jsx
// 重置按钮
<Button 
  icon={<ReloadOutlined />}
>
  重置
</Button>

// 返回按钮
<Button 
  icon={<ArrowLeftOutlined />}
>
  返回
</Button>
```

### 表格规范
- 表格列宽度：根据内容设置合适的宽度
- 表格操作列：固定在右侧，宽度合适
- 表格分页：默认每页10条
- 表格空数据：显示友好的提示
- 表格中的操作按钮采用以下风格
```jsx
 <Button
            type="primary"
            size="small"
            icon={<EditOutlined />}
            onClick={() => openStationForm(record)}
          >
            编辑
          </Button>
          <Button
            type="primary"
            size="small"
            danger
            icon={<DeleteOutlined />}
            onClick={() => handleDeleteStation(record)}
          >
            删除
          </Button>
```

主要特点：
- 采用双Tab页设计（列表 + 审批中心）
- 支持批量和单个审批操作
- 实现统一的审批流程和数据模型

## 模拟数据规范

### 数据文件组织
  - 位置：`src/mock/[模块名]/[功能名].json`
  - 命名规范：使用小驼峰命名法
  - 示例：`src/mock/system/userList.json`

### 通用模拟数据
- 组织架构要求
  - 总公司：江西交投化石能源公司
  - 分公司（8个）：赣中分公司、赣东北分公司、赣东分公司、赣东南分公司、赣南分公司、赣西南分公司、赣西分公司、赣西北分公司
  - 每个分公司下有2个服务区，每个服务区有2个油站

- 员工要求
  - 总公司：总经理，副总经理，部长，副部长，主任，业务经理
  - 分公司：经理，副经理，业务经理
  - 油站：油站经理，加油员，收银员，财务人员，安全管理人员

- 油品品号
  - 每个加油站都有4种油品品号+1种尿素：92#，95#，98#，0#，尿素

- 油枪信息
  - 每个加油站都有8把加油枪+1个尿素枪：92#有2把油枪，95#有2把油枪，98#有2把油枪，0#有2把油枪，尿素有1把油枪

### 审批数据规范
- 审批中心模拟数据位置：`src/mock/[模块名]/[模块名]ApprovalData.json`
- 标准数据结构：
  ```javascript
  {
    "pendingApprovals": [ /* 待审批记录 */ ],
    "approvalHistory": [ /* 审批历史记录 */ ]
  }
  ```

## 开发规范

### 文件组织规则

#### 基础目录结构
```
src/
├── pages/                    # 页面目录
│   ├── [模块名]/            # 功能模块目录
│   │   ├── index.js         # 模块入口文件
│   │   ├── index.css        # 模块样式文件
│   │   ├── components/      # 模块私有组件
│   │   ├── services/        # 模块服务
│   │   └── utils/           # 模块工具函数
│   ├── components/          # 公共组件
│   ├── services/            # 公共服务
│   └── utils/               # 公共工具函数
├── components/              # 全局组件
├── services/                # 全局服务
├── utils/                   # 全局工具函数
├── assets/                  # 静态资源
├── styles/                  # 全局样式
├── docs/                    # 项目文档
└── config/                  # 配置文件
```

#### 命名规范
- 文件夹：小写字母，多词用连字符
- 组件文件：大驼峰命名
- 样式文件：与组件同名，使用css后缀
- 服务文件：小驼峰命名
- 工具函数：小驼峰命名
